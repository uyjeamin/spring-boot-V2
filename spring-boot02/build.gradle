plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'hexagon'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

subprojects {
	group = 'team.retum'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = 17

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		//lombok
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		implementation 'org.springframework.boot:spring-boot-starter'

		//test
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		// 기본 AssertJ
		testImplementation 'org.assertj:assertj-core:3.24.2'
/*
		 추가적인 기능이 필요하다면 선택적으로 추가
		 Swing 컴포넌트 테스트
		testImplementation 'org.assertj:assertj-swing:3.17.2'

		 데이터베이스 테스트
		testImplementation 'org.assertj:assertj-db:2.0.0'

		 Neo4j 테스트
		testImplementation 'org.assertj:assertj-neo4j:1.0.0'
*/
		//QueryDsl
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	enabled = true
	destinationDirectory = file("$buildDir/libs")
	mainClass = 'project.SpringBoot02Application'
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
	}
}

jar.enabled = false


