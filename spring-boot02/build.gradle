plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'hexagon'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

subprojects {
	group = 'team.retum'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = 17

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		// Lombok
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		// Spring Boot 기본 설정
		implementation 'org.springframework.boot:spring-boot-starter'

		// QueryDSL 설정
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"

		// Test
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.assertj:assertj-core:3.24.2'
	}

	tasks.named('test') {
		useJUnitPlatform()
	}

	// QueryDSL Q클래스 생성 경로 설정
	def generatedDir = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main")

	sourceSets {
		main {
			java {
				srcDirs += generatedDir
			}
		}
	}

	tasks.withType(JavaCompile).configureEach {
		options.annotationProcessorGeneratedSourcesDirectory = generatedDir.get().asFile
	}

	clean {
		delete generatedDir
	}
}

tasks.named('bootJar') {
	enabled = true
	destinationDirectory = file("$buildDir/libs")
	mainClass = 'project.SpringBoot02Application'
}

jar.enabled = false
